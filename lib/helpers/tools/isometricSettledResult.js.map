{"version":3,"file":"isometricSettledResult.js","sourceRoot":"","sources":["../../../src/helpers/tools/isometricSettledResult.ts"],"names":[],"mappings":";;;AAAA,+CAAsD;AAGtD,YAAY;AAEZ,SAAgB,sBAAsB,CACpC,IAA6B,EAC7B,QAAgB,CAAC,CAAC;IAElB,IAAI,IAAI,CAAC,MAAM,KAAK,qBAAS,EAAE;QAC7B,MAAM,OAAO,GAAoB;YAC/B,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,IAAI,CAAC,KAAK;YACrB,QAAQ,EAAE,IAAI;YACd,gBAAgB,EAAE,IAAI;YACtB,WAAW,EAAE,CAAC,CAAC;YACf,KAAK;SACN,CAAC;QACF,OAAO,OAAO,CAAC;KAChB;IACD,MAAM,OAAO,GAAgB;QAC3B,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,KAAK,EAAE,SAAS;QAChB,QAAQ,EAAE,IAAI,CAAC,MAAM;QACrB,SAAS,EAAE,IAAI;QACf,gBAAgB,EAAE,SAAS;QAC3B,WAAW,EAAE,CAAC,CAAC;QACf,KAAK;KACN,CAAC;IACF,OAAO,OAAO,CAAC;AACjB,CAAC;AA5BD,wDA4BC;AAED,gBAAgB;AACT,KAAK,UAAU,4BAA4B;IAChD,OAAO,CAAC,GAAG,CAAC,iBAAiB,UAAU,EAAE,CAAC,CAAC;IAC3C,OAAO,CAAC,GAAG,CACT;QACE;YACE,MAAM,EAAE,qBAAS;YACjB,KAAK,EAAE,IAAI;YACX,CAAC,qBAAS,CAAC,EAAE,IAAI;YACjB,CAAC,oBAAQ,CAAC,EAAE,IAAI;YAChB,gBAAgB,EAAE,IAAI;YACtB,WAAW,EAAE,CAAC;YACd,KAAK,EAAE,CAAC;SACT;KACF,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAC9B,CAAC;IACF,OAAO,CAAC,GAAG,CACT;QACE;YACE,MAAM,EAAE,oBAAQ;YAChB,MAAM,EAAE,IAAI;YACZ,CAAC,qBAAS,CAAC,EAAE,IAAI;YACjB,CAAC,oBAAQ,CAAC,EAAE,IAAI;YAChB,gBAAgB,EAAE,IAAI;YACtB,WAAW,EAAE,CAAC;YACd,KAAK,EAAE,CAAC;SACT;KACF,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAC9B,CAAC;IAEF,OAAO,CAAC,GAAG,CACT;QACE;YACE,MAAM,EAAE,oBAAQ;YAChB,MAAM,EAAE,IAAI;SACb;QACD;YACE,MAAM,EAAE,qBAAS;YACjB,KAAK,EAAE,IAAI;YACX,CAAC,qBAAS,CAAC,EAAE,IAAI;YACjB,CAAC,oBAAQ,CAAC,EAAE,IAAI;YAChB,gBAAgB,EAAE,IAAI;YACtB,WAAW,EAAE,CAAC;YACd,KAAK,EAAE,CAAC;SACT;QACD;YACE,MAAM,EAAE,qBAAS;YACjB,KAAK,EAAE,IAAI;SACZ;QACD;YACE,MAAM,EAAE,oBAAQ;YAChB,MAAM,EAAE,IAAI;YACZ,CAAC,qBAAS,CAAC,EAAE,IAAI;YACjB,CAAC,oBAAQ,CAAC,EAAE,IAAI;YAChB,gBAAgB,EAAE,IAAI;YACtB,WAAW,EAAE,CAAC;YACd,KAAK,EAAE,CAAC;SACT;KACF,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAC9B,CAAC;IACF,OAAO,KAAK,CAAC,CAAC;AAChB,CAAC;AA5DD,oEA4DC;AACD,kCAAkC","sourcesContent":["import { FULFILLED, REJECTED } from '../../constants';\nimport { Settled, SettledLeft, SettledRight } from '../../types';\n\n/** @beta */\n\nexport function isometricSettledResult<T>(\n  item: PromiseSettledResult<T>,\n  index: number = -1\n): Settled<T> {\n  if (item.status === FULFILLED) {\n    const settled: SettledRight<T> = {\n      status: item.status,\n      value: item.value,\n      reason: undefined,\n      fulfilled: item.value,\n      rejected: null,\n      currentRejection: null,\n      recipeSteps: -1,\n      index,\n    };\n    return settled;\n  }\n  const settled: SettledLeft = {\n    status: item.status,\n    reason: item.reason,\n    value: undefined,\n    rejected: item.reason,\n    fulfilled: null,\n    currentRejection: undefined,\n    recipeSteps: -1,\n    index,\n  };\n  return settled;\n}\n\n/** @internal */\nexport async function isometricSettledResult_TEST_() {\n  console.log(`at: TEST from ${__filename}`);\n  console.log(\n    [\n      {\n        status: FULFILLED,\n        value: null,\n        [FULFILLED]: null,\n        [REJECTED]: null,\n        currentRejection: null,\n        recipeSteps: 0,\n        index: 0,\n      },\n    ].map(isometricSettledResult)\n  );\n  console.log(\n    [\n      {\n        status: REJECTED,\n        reason: null,\n        [FULFILLED]: null,\n        [REJECTED]: null,\n        currentRejection: true,\n        recipeSteps: 0,\n        index: 0,\n      },\n    ].map(isometricSettledResult)\n  );\n\n  console.log(\n    [\n      {\n        status: REJECTED,\n        reason: null,\n      },\n      {\n        status: FULFILLED,\n        value: null,\n        [FULFILLED]: null,\n        [REJECTED]: null,\n        currentRejection: null,\n        recipeSteps: 0,\n        index: 0,\n      },\n      {\n        status: FULFILLED,\n        value: null,\n      },\n      {\n        status: REJECTED,\n        reason: null,\n        [FULFILLED]: null,\n        [REJECTED]: null,\n        currentRejection: true,\n        recipeSteps: 0,\n        index: 0,\n      },\n    ].map(isometricSettledResult)\n  );\n  return void 0;\n}\n// isometricSettledResult_TEST_();\n"]}