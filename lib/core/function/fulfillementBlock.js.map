{"version":3,"file":"fulfillementBlock.js","sourceRoot":"","sources":["../../../src/core/function/fulfillementBlock.ts"],"names":[],"mappings":";;;AAAA,yDAGkC;AAElC,yDAAsD;AAEtD;;;;;;eAMe;AACR,KAAK,UAAU,iBAAiB,CACrC,IAAuD,EACvD,KAAa,EACb,KAAsC,EACtC,YAA+B,KAAK,EAAC,KAAK,EAAC,EAAE,CAAC,KAAiB,EAC/D,SAAyB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EAC5E,WAA6B,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CACzD,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAE5B,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC;IACrB,IAAI,SAAY,CAAC;IACjB,IAAI,IAAA,2BAAc,EAAI,IAAI,CAAC,IAAI,IAAA,qCAAwB,EAAI,IAAI,CAAC,EAAE;QAChE,IAAI,IAAA,2BAAc,EAAI,IAAI,CAAC,EAAE;YAC3B,MAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC;YACzC,WAAW,GAAG,eAAe,GAAG,CAAC,CAAC;YAClC,gEAAgE;YAChE,oBAAoB;YACpB,gEAAgE;SACjE;QACD,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QACvB,kEAAkE;QAClE,oBAAoB;QACpB,kEAAkE;KACnE;SAAM;QACL,SAAS,GAAG,IAAI,CAAC;QACjB,WAAW,GAAG,CAAC,CAAC;KACjB;IACD,MAAM,KAAK,GAAG,MAAM,SAAS,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACvD,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC5B,MAAM,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACpC,OAAO,IAAA,mCAAgB,EAAI;QACzB,KAAK;QACL,KAAK;QACL,WAAW;KACZ,CAAC,CAAC;AACL,CAAC;AAnCD,8CAmCC;AAED,0BAA0B;AACnB,KAAK,UAAU,uBAAuB;IAC3C,OAAO,CAAC,GAAG,CAAC,oCAAoC,UAAU,EAAE,CAAC,CAAC;IAC9D,OAAO,CAAC,GAAG,CAAC,MAAM,iBAAiB,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClD,OAAO,CAAC,GAAG,CACT,MAAM,iBAAiB,CACrB;QACE,MAAM,EAAE,WAAW;QACnB,KAAK,EAAE,EAAE;QACT,MAAM,EAAE,SAAS;QACjB,SAAS,EAAE,EAAE;QACb,QAAQ,EAAE,IAAI;QACd,gBAAgB,EAAE,IAAI;QACtB,WAAW,EAAE,CAAC,CAAC;KAChB,EACD,CAAC,EACD,CAAC,EAAE,CAAC,CACL,CACF,CAAC;IACF,OAAO,CAAC,GAAG,CACT,MAAM,iBAAiB,CACrB;QACE,MAAM,EAAE,WAAW;QACnB,KAAK,EAAE,EAAE;KACV,EACD,CAAC,EACD,CAAC,EAAE,CAAC,CACL,CACF,CAAC;IACF,OAAO,KAAK,CAAC,CAAC;AAChB,CAAC;AA7BD,0DA6BC;AACD,4BAA4B","sourcesContent":["import {\n  isPromiseFulfilledResult,\n  isSettledRight,\n} from '../../helpers/assertions';\nimport { LookupFn, SettledRight, TransformFn, ValidateFn } from '../../types';\nimport { makeFulfillement } from './makeFulfillement';\n\n/**\n *\n *\n\n\n\n * @internal */\nexport async function fulfillementBlock<T, R>(\n  item: T | (SettledRight<T> | PromiseFulfilledResult<T>),\n  index: number,\n  array: (T | PromiseSettledResult<T>)[],\n  transform: TransformFn<T, R> = async value => value as any as R,\n  lookup: LookupFn<T, R> = (value, index, array) => void [value, index, array],\n  validate: ValidateFn<T, R> = async (value, index, array) =>\n    void [value, index, array]\n) {\n  let recipeSteps = -1;\n  let itemValue: T;\n  if (isSettledRight<T>(item) || isPromiseFulfilledResult<T>(item)) {\n    if (isSettledRight<T>(item)) {\n      const itemRecipeSteps = item.recipeSteps;\n      recipeSteps = itemRecipeSteps + 1;\n      // HACK: -------------------------------------------------------\n      // process.exit(15);\n      // BUG: --------------------------------------------------------\n    }\n    itemValue = item.value;\n    // HACK: ---------------------------------------------------------\n    // process.exit(14);\n    // BUG: ----------------------------------------------------------\n  } else {\n    itemValue = item;\n    recipeSteps = 0;\n  }\n  const value = await transform(itemValue, index, array);\n  lookup(value, index, array);\n  await validate(value, index, array);\n  return makeFulfillement<R>({\n    value,\n    index,\n    recipeSteps,\n  });\n}\n\n/* istanbul ignore next */\nexport async function fulfillementBlock_TEST_() {\n  console.log(`at: fulfillementBlock_TEST_ from ${__filename}`);\n  console.log(await fulfillementBlock(10, 0, [10]));\n  console.log(\n    await fulfillementBlock(\n      {\n        status: 'fulfilled',\n        value: 10,\n        reason: undefined,\n        fulfilled: 10,\n        rejected: null,\n        currentRejection: null,\n        recipeSteps: -1,\n      },\n      0,\n      [10]\n    )\n  );\n  console.log(\n    await fulfillementBlock(\n      {\n        status: 'fulfilled',\n        value: 10,\n      },\n      0,\n      [10]\n    )\n  );\n  return void 0;\n}\n// fulfillementBlock_TEST_()\n"]}