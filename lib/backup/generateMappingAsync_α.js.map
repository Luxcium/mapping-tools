{"version":3,"file":"generateMappingAsync_α.js","sourceRoot":"","sources":["../../src/backup/generateMappingAsync_α.ts"],"names":[],"mappings":";;;AAAA,4CAAmD;AAGnD,kBAAkB;AACX,KAAK,SAAS,CAAC,CAAC,sBAAsB,CAC3C,UAAuB,EACvB,SAAgC,CAAC,0BAA0B;;IAE3D,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,UAAU,EAAE;QACnC,IAAI;YACF,MAAM,KAAK,GAAG,MAAM,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;YAC1D,MAAM,EAAE,MAAM,EAAE,qBAAS,EAAE,KAAK,EAAE,CAAC;SACpC;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,EAAE,MAAM,EAAE,oBAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;SAC3C;KACF;AACH,CAAC;AAbD,wDAaC;AAED,kBAAkB;AACL,QAAA,GAAG,GAGL,EAAE,CAAC,GAAG,CAAC","sourcesContent":["import { FULFILLED, REJECTED } from '../constants';\nimport { Mapper } from '../types';\n\n/** @deprecated */\nexport async function* generateMappingAsync_α<R, T>(\n  collection: Iterable<T>,\n  transform: Mapper<T, Promise<R>> // (item: T) => Promise<R>\n): AsyncGenerator<PromiseSettledResult<R>, void, unknown> {\n  let i = 0;\n  for await (const item of collection) {\n    try {\n      const value = await transform(item, i++, [...collection]);\n      yield { status: FULFILLED, value };\n    } catch (error) {\n      yield { status: REJECTED, reason: error };\n    }\n  }\n}\n\n/** @deprecated */\nexport const map: <U>(\n  callbackfn: (value: never, index: number, array: never[]) => U,\n  thisArg?: any\n) => U[] = [].map;\n"]}